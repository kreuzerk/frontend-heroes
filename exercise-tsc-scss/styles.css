/*
    TODO 1: create a variable for the following colors:
    - $basic-color: #FFFFFF;
    - $primary-color: #0b656b;
    - $secondary-color: #D9D9D9;
*/

/*
    TODO 2: Replace all the colors in the files with the variables:
    - for example color: #FFFFFF becomes color: "$basic-color", #0b656b becomes "$primary-color" and #D9D9D9 becomes
    "$secondary-color"
 */

body, html {
    height: 100%;
    margin: 0;
}

main {
    display: flex;
    align-items: flex-start;
    justify-content: center;

    background-image: url("assets/background.webp");
    height: 100%;

    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;

    clip-path: polygon(0 0, 100% 0, 100% 85%, 50% 100%, 0 85%);
}

.hero {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-top: 50px;
}

/*
    TODO 3: Instead of combined selector we can now use nesting.
      Let's nest the h1 into the .hero selector like this:
      "
    .hero {
        h1 ...
    }
    "
 */
.hero h1 {
    color: #FFFFFF;
    font-size: 120px;

    font-family: 'Staatliches', cursive;
    margin-bottom: 50px;
}

.hero-image-container {
    display: flex;
    align-items: center;
}
/*
    TODO 4: Use nesting and add the img styles inside the .hero-image-container.
     .hero-image-container {
        img ...
    }
 */
.hero-image-container img {
    border: 5px solid #FFFFFF;
    border-radius: 50%;
    object-fit: cover;

    margin-left: 50px;
    margin-right: 50px;

    box-shadow: 2px 12px 38px -2px rgba(0,0,0,0.75);
    -webkit-box-shadow: 2px 12px 38px -2px rgba(0,0,0,0.75);
    -moz-box-shadow: 2px 12px 38px -2px rgba(0,0,0,0.75);

    height: 250px;
    width: 250px;
}

.change-hero-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;

    height: 50px;
    width: 50px;
    font-size: 40px;
    border-radius: 50%;

    color: #FFFFFF;
    border: 1px solid transparent;
    background: #1C8188;
    outline: none;
}

/*
    TODO 5: Here we can use nesting again. But additionally we need to use the Saas parent selector (&) here.
    The & selector makes it possible to reuse the outer selector. In our case we should refactor it to
    "&:hover". This means that the styles will apply to the parent selector WITH (&) the nested selector
    so in the browser the styles will apply to a element with ".change-hero-btn" class
    which was hovered ":hover" by the user...
 */

.change-hero-btn:hover {
    background: #FFFFFF;
    color: #1C8188;
}

/*
    TODO 6: Hop back to the README.md and continue with the next steps.
 */

@media only screen and (min-width: 768px) {
    .hero-image-container img {
        width: 300px;
        height: 300px;
    }
}

@media only screen and (min-width: 992px) {
    .hero-image-container img {
        width: 400px;
        height: 400px;
    }

    .change-hero-btn {
        width: 100px;
        height: 100px;
    }
}
